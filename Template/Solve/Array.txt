  CIN( int , N );
  using entry_type = int;
  // using entry_type = ll;
  // using entry_type = MP;
  // using entry_type = T2<int>;
  CIN_A( entry_type , 0 , N , A );
  // Sort( A );
  // --A;

  // /* ïpìxï\ O(N) */
  // vector<int> A_hind( N );
  // // map<entry_type,int> A_hind( N );
  // FOR( i , 0 , N ){
  //   A_hind[A[i]]++;
  // }

  // /* ãtëú O(N) */
  // vector<vector<int>> A_inv( N );
  // FOR( i , 0 , N ){
  //   A_inv[A[i]] <<= i;
  // }

  // /* ó›êœòa O(N)/O(1) */
  // /* SetTheory/DirectProduct/AffineSpace/CumulativeProduct/compress.txt */
  // CumulativeSum cs( move( A ) );

  // /* äKç∑êîóÒ O(N)/O(1) */
  // /* SetTheory/DirectProduct/AffineSpace/DifferenceSequence/compress.txt */
  // DifferenceSequence ds( move( A ) );

  // /* îrëºìIÉXÉpÅ[ÉXÉeÅ[ÉuÉã O(N log N)/O(__builtin_clzÇÃåvéZó ) */
  // /* SetTheory/DirectProduct/AffineSpace/DisjointSparseTable/compress.txt */
  // DisjointSparseTable dst( A ); // ç≈ëÂílÇÃä«óù
  // // AbstractDisjointSparseTable dst( MinSemilattice<decltype(A[0])>( 1e9 ) , A );
  // // AbstractDisjointSparseTable dst( MultiplicativeMonoid<decltype(A[0])>( 1 ) , A );

  // /* ì]ì|êî O(N log N) */
  // /* Combinatorial/Permutation/compress.txt */
  // ll inv_num = InversionNumber( A );

