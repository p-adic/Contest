  CIN( int , N , M );
  // CIN( int , N ); int M = N - 1;
  using path = Pair<int,ll>;
  vector<vector<path>> e( N );
  // CEXPR( ll , infty , 1e18 );
  // vector weight( N , vector( N , infty ) ); FOR( i , 0 , N ){ weight[i][i] = 0; }
  REPEAT( M ){
    CIN( ll , i , j , w ); --i; --j;
    e[i].push_back( { j , w } );
    e[j].push_back( { i , w } );
    // weight[i][j] = weight[j][i] = w;
  }
  auto edge = Get( e );
  // CIN_AA( ll , 0 , N , 0 , N , weight );
  // auto edge = [&]( const int& i ){
  //   vector<path> answer{};
  //   FOR( j , 0 , N ){
  //     answer.push_back( { j , w } );
  //   }
  //   return answer;
  // };
  Graph graph{ N , edge };
  Dijkstra dijk{ graph }; vector<decldecay_t(dijk.Infty())> d = dijk.GetDistance( 0 );
  // AbstractUnionFindForest uff{ graph , AdditiveGroup<ll>() };
  // FloydWarshall fw{ infty , weight }; vector<vector<decltype(infty)>> d = fw.GetDistance();
