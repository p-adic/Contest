  CIN_HW;
  // CIN( int , N , M ); SET_HW( N , M );
  SetWallStringOnGrid(); // 入力からgrid[i][j]に'.'や'#'を格納
  // grid = vector( H , string( W , '.' ) ); // EdgeOnGridなどに使用。
  // grid_edge_i_plus = false; // 第１成分正（xy_axis?右:下）方向の許容性。
  // grid_edge_j_plus = false; // 第２成分正（xy_axis?上:右）方向の許容性。
  // grid_edge_i_minus = false; // 第１成分負（xy_axis?左:上）方向の許容性。
  // grid_edge_j_minus = false; // 第２成分負（xy_axis?下:左）方向の許容性。
  // walkable = '#'; // 床と壁を反転。
  GridGraph graph{ EdgeOnGrid }; // 重みなし。
  // GridGraph graph{ WEdgeOnGrid }; // 重み付き。
  BreadthFirstSearch bfs{ graph , T2<int>{-1,-1} , list<T2<int>>{{0,0}} }; vector<int> d = bfs.GetDistance();
  // BreadthFirstSearch bfs{ graph , T2<int>{-1,-1} }; auto [colour,colour_inv,colour_ulim] = bfs.GetConnectedComponent(); int cc_num = colour_ulim; FOR( i , 0 , H ){ FOR( j , 0 , W ){ grid[i][j] == walkable ? cc_num : --cc_num; } } // 連結成分取得

  /* xy_axis = true: 右と上を正軸方向とする座標（非デフォルト） */
  /* (0,1)  -> U */
  /* (1,0)  -> R */
  /* (0,-1) -> D */
  /* (-1,0) -> L */
  /* xy_axis = false: 下と右を正軸方向とする座標（デフォルト） */
  /* (-1,0) -> U */
  /* (0,1)  -> R */
  /* (1,0)  -> D */
  /* (0,-1) -> L */
  /* {i,j}へデコード: EnumHW( v )                                         */
  /* {i,j}をコード: EnumHW_inv( { i , j } );                              */
  /* 方向の文字列：direction="URDL";                                       */
  /* (i,j)->(k,h)の方向番号を取得: DirectionNumberOnGrid( i , j , k , h , false ); */
  /* v->wの方向番号を取得: DirectionNumberOnGrid( v , w , false );         */
  /* 文字cの方向番号を取得: DirectionNumberOnGrid( c );                     */
  /* 方向番号の反転U<->D、R<->L: ReverseDirectionNumberOnGrid( n );        */
  /* 方向番号nの方向ベクトルを取得: DirectionVectorOnGrid( n , false );      */
