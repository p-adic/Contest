  CIN( int , N , M );
  // CIN( int , N ); int M = N - 1;
  vector<vector<int>> e( N );
  // vector<T2<int>> edge_enum( M );
  FOR( m , 0 , M ){
    CIN( int , i , j ); --i; --j;
    e[i].push_back( j );
    e[j].push_back( i );
    // edge_enum[m] = {i,j};
  }
  auto edge = Get( e );
  Graph graph{ N , edge };
  BreadthFirstSearch bfs{ graph , -1 , list<int>{0} }; vector<int> d = bfs.GetDistance();
  // BreadthFirstSearch bfs{ graph , -1 }; auto [colour,colour_inv,colour_ulim] = bfs.GetConnectedComponent();
  // DepthFirstSearchOnTree dfst{ graph , 0 };
  // AbstractUnionFindForest uff{ graph , AdditiveGroup<int>() };
  // auto [ts,ts_inv,prev,dir_edge] = TopologicalSortedTree( graph , 0 );
  // Graph graph_dir{ N , Get( dir_edge ) }; // 無向木をトポロジカルソートで0が根の有向化
  // Graph graph_dir_rev{ N , [&]( const int& i ){ return vector( prev[i] >= 0 ? 1 : 0 , prev[i] ); } };
