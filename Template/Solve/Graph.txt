  CIN( int , N , M );
  // CIN( int , N ); int M = N - 1;
  vector<vector<int>> e( N );
  // vector<T2<int>> edge_enum( M );
  FOR( m , 0 , M ){
    CIN( int , i , j ); --i; --j;
    e[i].push_back( j );
    e[j].push_back( i );
    // edge_enum[m] = {i,j};
  }
  auto edge = Get( e );
  Graph graph{ N , edge };
  list<int> start_points = {0};
  BreadthFirstSearch bfs{ graph , -1 , start_points }; vector<int> d = bfs.GetDistance();
  // BreadthFirstSearch bfs{ graph , -1 }; auto [colour,colour_inv,colour_ulim] = bfs.GetConnectedComponent();
  // DepthFirstSearchOnTree dfst{ graph , 0 };
  // AbstractUnionFindForest uff{ graph , AdditiveGroup<int>() };
  // // AbstractUnionFindForest uff{ N , AdditiveGroup<int>() };
  // // vector<int> weight( N ); // 各連結成分のサイズを根の添え字に格納
  // // ll weight2 = N; // 連結成分サイズの2乗和を管理
  // // FOR( m , 0 , M ){
  // //   auto& [i,j] = edge_enum[m];
  // //   int ri = uff.RootOfNode( i );
  // //   int rj = uff.RootOfNode( j );
  // //   if( ri != rj ){
  // //     int wi = weight[ri];
  // //     int wj = weight[rj];
  // //     Graft( i , j );
  // //     weight[ri] = weight[rj] = wi + wj;
  // //     weight2 += 2 * ll( wi ) * wj;
  // //   }
  // // }
  // auto [ts,ts_inv,prev,dir_edge] = TopologicalSortedTree( graph , 0 );
  // Graph graph_dir{ N , Get( dir_edge ) }; // 無向木をトポロジカルソートで0が根の有向化
  // Graph graph_dir_rev{ N , [&]( const int& i ){ return vector( prev[i] >= 0 ? 1 : 0 , prev[i] ); } };
